[project]
name = "app"
version = "0.1.0"
description = ""
requires-python = "==3.12.10"
dependencies = [
    "fastapi[standard]==0.115.12",
    "python-multipart==0.0.20",
    "email-validator==2.2.0",
    "passlib[bcrypt]==1.7.4",
    "tenacity==8.5.0",
    "pydantic==2.11.4",
    "emails==0.6",
    "jinja2==3.1.6",
    "alembic==1.15.2",
    "httpx==0.28.1",
    "psycopg[binary]==3.2.7",
    "sqlmodel==0.0.24",
    # Pin bcrypt until passlib supports the latest
    "bcrypt==4.0.1",
    "pydantic-settings==2.9.1",
    "sentry-sdk[fastapi]==1.45.1",
    "pyjwt==2.10.1",
    "pycryptodome==3.22.0",
]

[tool.uv]
dev-dependencies = [
    "pytest==7.4.4",
    "mypy==1.15.0",
    "ruff==0.11.8",
    "pre-commit==3.8.0",
    "types-passlib==1.7.7.20250408",
    "coverage==7.8.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py312"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
